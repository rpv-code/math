{"version":3,"sources":["logo.svg","components/addMath.js","components/subtractMath.js","components/equationMath.js","components/buttonBox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AddMath","state","answer","problem","resetDisplay","correctAnswers","this","randomMathProblem","setState","numberOne","Math","floor","random","numberTwo","className","type","size","id","autoFocus","autoComplete","onClick","checkAnswer","document","getElementById","value","console","log","computerAnswer","numCorrectAnswer","resetProblem","Component","SubtractMath","numberBig","numberSmall","EquationMath","answerOne","answerTwo","userAnswer","parseInt","ButtonBox","props","name","App","displayAddition","displaySubtraction","displayEquation","clickType","handleClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2IAAAA,EAAOC,QAAU,IAA0B,kC,+HCwE5BC,G,wNArEXC,MAAQ,CACJC,OAAO,IACPC,QAAQ,GACRC,cAAc,EACdC,eAAgB,G,kEAIfC,KAAKC,sB,sCAIND,KAAKE,SAAS,CAACN,OAAQ,0B,0CAGP,IAAD,OACXO,EAAaC,KAAKC,MAAsB,GAAhBD,KAAKE,UAC7BC,EAAaH,KAAKC,MAAsB,GAAhBD,KAAKE,UAC3BT,EACN,yBAAKW,UAAU,eACX,yBAAKA,UAAU,eAAgBL,EAA/B,MAA+CI,EAA/C,MAA4D,2BAAOC,UAAU,YAAYC,KAAK,OAAOC,KAAK,IAAIC,GAAG,SAASC,WAAS,EAACC,aAAa,SACjJ,yBAAKL,UAAU,eAAc,4BAAQC,KAAK,SAASK,QAAS,kBAAM,EAAKC,YAAYZ,EAAWI,EAAWS,SAASC,eAAe,UAAUC,SAA9G,kBAEjCC,QAAQC,IAAI,UAAYvB,GACxBG,KAAKE,SAAS,CAACL,c,kCAGPM,EAAWI,EAAWX,GAC9B,IAAIyB,EAAiBlB,EAAYI,EACjC,GAAIX,GAAUyB,EAAe,CACzBrB,KAAKE,SAAS,CAACN,OAAQ,YACvB,IAAI0B,EAAmBtB,KAAKL,MAAMI,eAAiB,EACnDC,KAAKE,SAAS,CAACH,eAAgBuB,IAC/BtB,KAAKE,SAAS,CAACJ,cAAa,SAEvBF,GAAUyB,IACfrB,KAAKE,SAAS,CAACN,OAAQ,UACvBI,KAAKE,SAAS,CAACH,eAAgB,O,qCAKnCC,KAAKE,SAAS,CAACJ,cAAa,IAC5BE,KAAKE,SAAS,CAACN,OAAQ,MACtBoB,SAASC,eAAe,UAAUC,MAAQ,GAC3ClB,KAAKC,sB,+BAGC,IAAD,OACL,OACI,yBAAKO,UAAU,OACX,yBAAKA,UAAU,eACX,yCAEHR,KAAKL,MAAME,QACZ,yBAAKW,UAAU,eACX,+CAAqBR,KAAKL,MAAMC,SAEpC,yBAAKY,UAAU,eACVR,KAAKL,MAAMI,eAAiB,EAAI,0CAAgBC,KAAKL,MAAMI,eAA3B,+BAA8E,MAEnH,yBAAKS,UAAU,eACVR,KAAKL,MAAMG,aAAe,4BAAQW,KAAK,SAASK,QAAU,kBAAM,EAAKS,iBAA3C,gBAAqF,W,GA/D9GC,cCgFPC,E,4MA/EX9B,MAAQ,CACJC,OAAO,IACPC,QAAQ,GACRC,cAAc,EACdC,eAAgB,G,kEAIfC,KAAKC,sB,sCAIND,KAAKE,SAAS,CAACN,OAAQ,0B,0CAGP,IAAD,OACX8B,EAAY,EACZC,EAAc,EACdxB,EAAaC,KAAKC,MAAsB,GAAhBD,KAAKE,UAC7BC,EAAaH,KAAKC,MAAsB,GAAhBD,KAAKE,UAC7BH,GAAaI,GACbmB,EAAYvB,EACZwB,EAAcpB,GAETJ,EAAYI,IACjBmB,EAAYnB,EACZoB,EAAcxB,GAElB,IAAMN,EACN,yBAAKW,UAAU,eACX,yBAAKA,UAAU,eAAgBkB,EAA/B,MAA+CC,EAA/C,MAA+D,2BAAOnB,UAAU,YAAYC,KAAK,OAAOC,KAAK,IAAIC,GAAG,SAASC,WAAS,EAACC,aAAa,SACpJ,yBAAKL,UAAU,eAAc,4BAAQC,KAAK,SAASK,QAAS,kBAAM,EAAKC,YAAYW,EAAWC,EAAaX,SAASC,eAAe,UAAUC,SAAhH,kBAEjCC,QAAQC,IAAI,UAAYvB,GACxBG,KAAKE,SAAS,CAACL,c,kCAGP6B,EAAWC,EAAa/B,GAChC,IAAIyB,EAAiBK,EAAYC,EACjC,GAAI/B,GAAUyB,EAAe,CACzBrB,KAAKE,SAAS,CAACN,OAAQ,YACvB,IAAI0B,EAAmBtB,KAAKL,MAAMI,eAAiB,EACnDC,KAAKE,SAAS,CAACH,eAAgBuB,IAC/BtB,KAAKE,SAAS,CAACJ,cAAa,SAEvBF,GAAUyB,IACfrB,KAAKE,SAAS,CAACN,OAAQ,UACvBI,KAAKE,SAAS,CAACH,eAAgB,O,qCAKnCC,KAAKE,SAAS,CAACJ,cAAa,IAC5BE,KAAKE,SAAS,CAACN,OAAQ,MACtBoB,SAASC,eAAe,UAAUC,MAAQ,GAC3ClB,KAAKC,sB,+BAGC,IAAD,OACL,OACI,yBAAKO,UAAU,OACX,yBAAKA,UAAU,eACX,4CAEHR,KAAKL,MAAME,QACZ,yBAAKW,UAAU,eACX,+CAAqBR,KAAKL,MAAMC,SAEpC,yBAAKY,UAAU,eACVR,KAAKL,MAAMI,eAAiB,EAAI,0CAAgBC,KAAKL,MAAMI,eAA3B,+BAA8E,MAEnH,yBAAKS,UAAU,eACVR,KAAKL,MAAMG,aAAe,4BAAQW,KAAK,SAASK,QAAU,kBAAM,EAAKS,iBAA3C,gBAAqF,W,GAzEzGC,aC2EZI,E,4MA1EXjC,MAAQ,CACJC,OAAO,IACPC,QAAQ,GACRC,cAAc,EACdC,eAAgB,G,kEAIfC,KAAKC,sB,sCAIND,KAAKE,SAAS,CAACN,OAAQ,0B,0CAGP,IAAD,OACXO,EAAaC,KAAKC,MAAsB,GAAhBD,KAAKE,UAC7BC,EAAaH,KAAKC,MAAsB,GAAhBD,KAAKE,UAC3BT,EACN,yBAAKW,UAAU,eACX,yBAAKA,UAAU,eAAgBL,EAA/B,MAA+CI,EAA/C,MAA4D,2BAAOC,UAAU,YAAYC,KAAK,OAAOC,KAAK,IAAIC,GAAG,YAAYC,WAAS,EAACC,aAAa,QAApJ,MAA8J,2BAAOL,UAAU,YAAYC,KAAK,OAAOC,KAAK,IAAIC,GAAG,YAAYC,WAAS,EAACC,aAAa,SACtP,yBAAKL,UAAU,eAAc,4BAAQC,KAAK,SAASK,QAAS,kBAAM,EAAKC,YAAYZ,EAAWI,EAAWS,SAASC,eAAe,aAAaC,MAAOF,SAASC,eAAe,aAAaC,SAA7J,kBAEjCC,QAAQC,IAAI,UAAYvB,GACxBG,KAAKE,SAAS,CAACL,c,kCAGPM,EAAWI,EAAWsB,EAAWC,GACzC,IAAIT,EAAiBlB,EAAYI,EAC7BwB,EAAaC,SAASH,GAAaG,SAASF,GAIhD,GAHAX,QAAQC,IAAIS,GACZV,QAAQC,IAAIU,GACZX,QAAQC,IAAIW,GACRA,GAAcV,EAAe,CAC7BrB,KAAKE,SAAS,CAACN,OAAQ,YACvB,IAAI0B,EAAmBtB,KAAKL,MAAMI,eAAiB,EACnDC,KAAKE,SAAS,CAACH,eAAgBuB,IAC/BtB,KAAKE,SAAS,CAACJ,cAAa,SAEvBiC,GAAcV,IACnBrB,KAAKE,SAAS,CAACN,OAAQ,UACvBI,KAAKE,SAAS,CAACH,eAAgB,O,qCAKnCC,KAAKE,SAAS,CAACJ,cAAa,IAC5BE,KAAKE,SAAS,CAACN,OAAQ,MACtBoB,SAASC,eAAe,aAAaC,MAAQ,GAC7CF,SAASC,eAAe,aAAaC,MAAQ,GAC9ClB,KAAKC,sB,+BAGC,IAAD,OACL,OACI,yBAAKO,UAAU,OACX,yBAAKA,UAAU,eACX,yCAEHR,KAAKL,MAAME,QACZ,yBAAKW,UAAU,eACX,+CAAqBR,KAAKL,MAAMC,SAEpC,yBAAKY,UAAU,eACVR,KAAKL,MAAMI,eAAiB,EAAI,0CAAgBC,KAAKL,MAAMI,eAA3B,+BAA8E,MAEnH,yBAAKS,UAAU,eACVR,KAAKL,MAAMG,aAAe,4BAAQW,KAAK,SAASK,QAAU,kBAAM,EAAKS,iBAA3C,gBAAqF,W,GApEzGC,aCWZS,E,4MAVXtC,MAAQ,G,uDACE,IAAD,OACL,OACI,6BACI,4BAAQa,UAAU,oBAAoBM,QAAS,kBAAM,EAAKoB,MAAMpB,QAAQ,EAAKoB,MAAMC,QAAQnC,KAAKkC,MAAMC,W,GAL9FX,aC0DTY,G,kNAhDbzC,MAAQ,CACN0C,iBAAiB,EACjBC,oBAAoB,EACpBC,iBAAiB,G,0DAGNC,GACXrB,QAAQC,IAAIoB,GACM,oBAAdA,GACFxC,KAAKE,SAAS,CAAEmC,iBAAiB,IACjCrC,KAAKE,SAAS,CAAEoC,oBAAoB,IACpCtC,KAAKE,SAAS,CAAEqC,iBAAiB,KAEZ,uBAAdC,GACPxC,KAAKE,SAAS,CAAEoC,oBAAoB,IACpCtC,KAAKE,SAAS,CAAEmC,iBAAiB,IACjCrC,KAAKE,SAAS,CAAEqC,iBAAiB,KAEZ,oBAAdC,IACPxC,KAAKE,SAAS,CAAEqC,iBAAiB,IACjCvC,KAAKE,SAAS,CAAEoC,oBAAoB,IACpCtC,KAAKE,SAAS,CAAEmC,iBAAiB,O,+BAI3B,IAAD,OACP,OACE,yBAAK7B,UAAU,uBACf,yBAAKA,UAAU,cACb,yBAAKA,UAAU,UACb,4CACE,yBAAKA,UAAU,OACb,kBAAC,EAAD,CAAW2B,KAAK,WAAWrB,QAAS,kBAAM,EAAK2B,YAAY,sBAC3D,kBAAC,EAAD,CAAWN,KAAK,cAAcrB,QAAS,kBAAM,EAAK2B,YAAY,yBAC9D,kBAAC,EAAD,CAAWN,KAAK,WAAWrB,QAAS,kBAAM,EAAK2B,YAAY,yBAInE,yBAAKjC,UAAU,mBACZR,KAAKL,MAAM0C,gBAAkB,kBAAC,EAAD,MAAc,KAC3CrC,KAAKL,MAAM2C,mBAAqB,kBAAC,EAAD,MAAmB,KACnDtC,KAAKL,MAAM4C,gBAAkB,kBAAC,EAAD,MAAmB,W,GA1CvCf,cCCEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjC,SAASC,eAAe,SDyHpB,kBAAmBiC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.837462ae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\nclass AddMath extends Component {\r\n    state = { \r\n        answer:'?',\r\n        problem:'',\r\n        resetDisplay: false,\r\n        correctAnswers: 0\r\n     }\r\n\r\n    componentDidMount(){\r\n         this.randomMathProblem();\r\n     }\r\n\r\n    calcClockTime(){\r\n        this.setState({answer: \"What is the Answer?\"})\r\n    }\r\n\r\n    randomMathProblem(){\r\n        let numberOne = (Math.floor(Math.random() * 10));\r\n        let numberTwo = (Math.floor(Math.random() * 10));\r\n        const problem=\r\n        <div className=\"col-12 cell\">\r\n            <div className=\"col-12 cell\">{ numberOne } + { numberTwo} = <input className=\"answerBox\" type=\"text\" size=\"4\" id=\"answer\" autoFocus autoComplete=\"off\"/></div>\r\n            <div className=\"col-12 cell\"><button type=\"button\" onClick={() => this.checkAnswer(numberOne, numberTwo, document.getElementById('answer').value)}>Check Answer</button></div>\r\n        </div> \r\n        console.log(\"problem\" + problem);\r\n        this.setState({problem});\r\n    }\r\n\r\n    checkAnswer(numberOne, numberTwo, answer){\r\n        let computerAnswer = numberOne + numberTwo;\r\n        if (answer == computerAnswer){\r\n            this.setState({answer: \"Correct\"})\r\n            let numCorrectAnswer = this.state.correctAnswers + 1;\r\n            this.setState({correctAnswers: numCorrectAnswer})\r\n            this.setState({resetDisplay:true});\r\n        }\r\n        else if (answer != computerAnswer){\r\n            this.setState({answer: \"Wrong\"})\r\n            this.setState({correctAnswers: 0})\r\n        }\r\n    }\r\n\r\n    resetProblem(){\r\n        this.setState({resetDisplay:false});\r\n        this.setState({answer: '?'});\r\n        {document.getElementById(\"answer\").value = ''}\r\n        this.randomMathProblem();\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <div className=\"row\">\r\n                <div className=\"col-12 cell\">\r\n                    <h1>Addition</h1>\r\n                </div>\r\n                {this.state.problem}           \r\n                <div className=\"col-12 cell\">\r\n                    <h1> Your answer is {this.state.answer}</h1>\r\n                </div>\r\n                <div className=\"col-12 cell\">\r\n                    {this.state.correctAnswers > 0 ? <div> You have {this.state.correctAnswers} correct answers in a row! </div> : null}\r\n                </div>\r\n                <div className=\"col-12 cell\">\r\n                    {this.state.resetDisplay ? <button type=\"button\" onClick={(() => this.resetProblem())} >Next Problem</button> : null}\r\n                </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default AddMath;","import React, { Component } from 'react';\r\n\r\nclass SubtractMath extends Component {\r\n    state = { \r\n        answer:'?',\r\n        problem:'',\r\n        resetDisplay: false,\r\n        correctAnswers: 0\r\n     }\r\n\r\n    componentDidMount(){\r\n         this.randomMathProblem();\r\n     }\r\n\r\n    calcClockTime(){\r\n        this.setState({answer: \"What is the Answer?\"})\r\n    }\r\n\r\n    randomMathProblem(){\r\n        let numberBig = 0;\r\n        let numberSmall = 0;\r\n        let numberOne = (Math.floor(Math.random() * 10));\r\n        let numberTwo = (Math.floor(Math.random() * 10));\r\n        if (numberOne >= numberTwo){\r\n            numberBig = numberOne;\r\n            numberSmall = numberTwo; \r\n        }\r\n        else if (numberOne < numberTwo){\r\n            numberBig = numberTwo;\r\n            numberSmall = numberOne;\r\n        }\r\n        const problem=\r\n        <div className=\"col-12 cell\">\r\n            <div className=\"col-12 cell\">{ numberBig } - { numberSmall } = <input className=\"answerBox\" type=\"text\" size=\"4\" id=\"answer\" autoFocus autoComplete=\"off\"/></div>\r\n            <div className=\"col-12 cell\"><button type=\"button\" onClick={() => this.checkAnswer(numberBig, numberSmall, document.getElementById('answer').value)}>Check Answer</button></div>\r\n        </div> \r\n        console.log(\"problem\" + problem);\r\n        this.setState({problem});\r\n    }\r\n\r\n    checkAnswer(numberBig, numberSmall, answer){\r\n        let computerAnswer = numberBig - numberSmall;\r\n        if (answer == computerAnswer){\r\n            this.setState({answer: \"Correct\"})\r\n            let numCorrectAnswer = this.state.correctAnswers + 1;\r\n            this.setState({correctAnswers: numCorrectAnswer})\r\n            this.setState({resetDisplay:true});\r\n        }\r\n        else if (answer != computerAnswer){\r\n            this.setState({answer: \"Wrong\"})\r\n            this.setState({correctAnswers: 0})\r\n        }\r\n    }\r\n\r\n    resetProblem(){\r\n        this.setState({resetDisplay:false});\r\n        this.setState({answer: '?'});\r\n        {document.getElementById(\"answer\").value = ''}\r\n        this.randomMathProblem();\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <div className=\"row\">\r\n                <div className=\"col-12 cell\">\r\n                    <h1>Subtraction</h1>\r\n                </div>\r\n                {this.state.problem}           \r\n                <div className=\"col-12 cell\">\r\n                    <h1> Your answer is {this.state.answer}</h1>\r\n                </div>\r\n                <div className=\"col-12 cell\">\r\n                    {this.state.correctAnswers > 0 ? <div> You have {this.state.correctAnswers} correct answers in a row! </div> : null}\r\n                </div>\r\n                <div className=\"col-12 cell\">\r\n                    {this.state.resetDisplay ? <button type=\"button\" onClick={(() => this.resetProblem())} >Next Problem</button> : null}\r\n                </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default SubtractMath;","import React, { Component } from 'react';\r\n\r\nclass EquationMath extends Component {\r\n    state = { \r\n        answer:'?',\r\n        problem:'',\r\n        resetDisplay: false,\r\n        correctAnswers: 0\r\n     }\r\n\r\n    componentDidMount(){\r\n         this.randomMathProblem();\r\n     }\r\n\r\n    calcClockTime(){\r\n        this.setState({answer: \"What is the Answer?\"})\r\n    }\r\n\r\n    randomMathProblem(){\r\n        let numberOne = (Math.floor(Math.random() * 10));\r\n        let numberTwo = (Math.floor(Math.random() * 10));\r\n        const problem=\r\n        <div className=\"col-12 cell\">\r\n            <div className=\"col-12 cell\">{ numberOne } + { numberTwo} = <input className=\"answerBox\" type=\"text\" size=\"2\" id=\"answerOne\" autoFocus autoComplete=\"off\"/> + <input className=\"answerBox\" type=\"text\" size=\"2\" id=\"answerTwo\" autoFocus autoComplete=\"off\"/></div>\r\n            <div className=\"col-12 cell\"><button type=\"button\" onClick={() => this.checkAnswer(numberOne, numberTwo, document.getElementById('answerOne').value, document.getElementById('answerTwo').value)}>Check Answer</button></div>\r\n        </div> \r\n        console.log(\"problem\" + problem);\r\n        this.setState({problem});\r\n    }\r\n\r\n    checkAnswer(numberOne, numberTwo, answerOne, answerTwo){\r\n        let computerAnswer = numberOne + numberTwo;\r\n        let userAnswer = parseInt(answerOne) + parseInt(answerTwo);\r\n        console.log(answerOne);\r\n        console.log(answerTwo);\r\n        console.log(userAnswer);\r\n        if (userAnswer == computerAnswer){\r\n            this.setState({answer: \"Correct\"})\r\n            let numCorrectAnswer = this.state.correctAnswers + 1;\r\n            this.setState({correctAnswers: numCorrectAnswer})\r\n            this.setState({resetDisplay:true});\r\n        }\r\n        else if (userAnswer != computerAnswer){\r\n            this.setState({answer: \"Wrong\"})\r\n            this.setState({correctAnswers: 0})\r\n        }\r\n    }\r\n\r\n    resetProblem(){\r\n        this.setState({resetDisplay:false});\r\n        this.setState({answer: '?'});\r\n        {document.getElementById(\"answerOne\").value = ''}\r\n        {document.getElementById(\"answerTwo\").value = ''}\r\n        this.randomMathProblem();\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <div className=\"row\">\r\n                <div className=\"col-12 cell\">\r\n                    <h1>Equation</h1>\r\n                </div>\r\n                {this.state.problem}           \r\n                <div className=\"col-12 cell\">\r\n                    <h1> Your answer is {this.state.answer}</h1>\r\n                </div>\r\n                <div className=\"col-12 cell\">\r\n                    {this.state.correctAnswers > 0 ? <div> You have {this.state.correctAnswers} correct answers in a row! </div> : null}\r\n                </div>\r\n                <div className=\"col-12 cell\">\r\n                    {this.state.resetDisplay ? <button type=\"button\" onClick={(() => this.resetProblem())} >Next Problem</button> : null}\r\n                </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default EquationMath;","import React, { Component } from 'react';\r\n\r\nclass ButtonBox extends Component {\r\n    state = { }\r\n    render() { \r\n        return ( \r\n            <div>\r\n                <button className=\"btn btn-secondary\" onClick={() => this.props.onClick(this.props.name)}>{this.props.name}</button>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default ButtonBox","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './components/addMath';\nimport AddMath from './components/addMath';\nimport SubtractMath from './components/subtractMath';\nimport EquationMath from './components/equationMath';\nimport ButtonBox from './components/buttonBox';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nclass App extends Component {\n  state = { \n    displayAddition: false,\n    displaySubtraction: false,\n    displayEquation: false\n   }\n\n   handleClick(clickType){\n    console.log(clickType);\n    if (clickType === \"displayAddition\"){\n      this.setState({ displayAddition: true});\n      this.setState({ displaySubtraction: false});\n      this.setState({ displayEquation: false});\n    }\n    else if (clickType === \"displaySubtraction\"){\n      this.setState({ displaySubtraction: true});\n      this.setState({ displayAddition: false});\n      this.setState({ displayEquation: false});\n    }\n    else if (clickType === \"displayEquation\"){\n      this.setState({ displayEquation: true});\n      this.setState({ displaySubtraction: false});\n      this.setState({ displayAddition: false});\n    }\n  }\n\n  render() { \n    return ( \n      <div className=\"App container-fluid\">\n      <div className=\"header row\">\n        <div className=\"col-12\">\n          <h1>Hello WORLD!</h1>          \n            <div className=\"row\">\n              <ButtonBox name=\"Addition\" onClick={() => this.handleClick(\"displayAddition\")}/>\n              <ButtonBox name=\"Subtraction\" onClick={() => this.handleClick(\"displaySubtraction\")}/>\n              <ButtonBox name=\"Equation\" onClick={() => this.handleClick(\"displayEquation\")}/>\n            </div>\n        </div>\n      </div>\n      <div className=\"mainWrapper row\">\n        {this.state.displayAddition ? <AddMath /> : null}\n        {this.state.displaySubtraction ? <SubtractMath /> : null}\n        {this.state.displayEquation ? <EquationMath /> : null}\n      </div>\n      </div>\n     );\n  }\n}\n \nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}