{"version":3,"sources":["logo.svg","components/addMath.js","components/subtractMath.js","components/equationMath.js","components/Image.js","components/diceMath.js","components/buttonBox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AddMath","state","answer","problem","resetDisplay","correctAnswers","this","randomMathProblem","setState","numberOne","Math","floor","random","numberTwo","className","type","size","id","autoFocus","autoComplete","onClick","checkAnswer","document","getElementById","value","console","log","computerAnswer","numCorrectAnswer","resetProblem","Component","SubtractMath","numberBig","numberSmall","EquationMath","answerOne","answerTwo","userAnswer","parseInt","Image","source","src","alt","DiceMath","numDice","diceImage","diceOne","diceTwo","diceThree","diceFour","diceFive","diceSix","numberRolled","i","push","key","imgText","ButtonBox","props","name","App","displayAddition","displaySubtraction","displayEquation","displayDice","clickType","handleClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b418d30f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react';\r\n\r\nclass AddMath extends Component {\r\n    state = { \r\n        answer:'?',\r\n        problem:'',\r\n        resetDisplay: false,\r\n        correctAnswers: 0\r\n     }\r\n\r\n    componentDidMount(){\r\n         this.randomMathProblem();\r\n     }\r\n\r\n    calcClockTime(){\r\n        this.setState({answer: \"What is the Answer?\"})\r\n    }\r\n\r\n    randomMathProblem(){\r\n        let numberOne = (Math.floor(Math.random() * 10));\r\n        let numberTwo = (Math.floor(Math.random() * 10));\r\n        const problem=\r\n        <div className=\"col-12 cell\">\r\n            <div className=\"col-12 cell\">{ numberOne } + { numberTwo} = <input className=\"answerBox\" type=\"text\" size=\"4\" id=\"answer\" autoFocus autoComplete=\"off\"/></div>\r\n            <div className=\"col-12 cell\"><button type=\"button\" onClick={() => this.checkAnswer(numberOne, numberTwo, document.getElementById('answer').value)}>Check Answer</button></div>\r\n        </div> \r\n        console.log(\"problem\" + problem);\r\n        this.setState({problem});\r\n    }\r\n\r\n    checkAnswer(numberOne, numberTwo, answer){\r\n        let computerAnswer = numberOne + numberTwo;\r\n        if (answer == computerAnswer){\r\n            this.setState({answer: \"Correct\"})\r\n            let numCorrectAnswer = this.state.correctAnswers + 1;\r\n            this.setState({correctAnswers: numCorrectAnswer})\r\n            this.setState({resetDisplay:true});\r\n        }\r\n        else if (answer != computerAnswer){\r\n            this.setState({answer: \"Wrong\"})\r\n            this.setState({correctAnswers: 0})\r\n        }\r\n    }\r\n\r\n    resetProblem(){\r\n        this.setState({resetDisplay:false});\r\n        this.setState({answer: '?'});\r\n        {document.getElementById(\"answer\").value = ''}\r\n        this.randomMathProblem();\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <div className=\"row\">\r\n                <div className=\"col-12 cell\">\r\n                    <h1>Addition</h1>\r\n                </div>\r\n                {this.state.problem}           \r\n                <div className=\"col-12 cell\">\r\n                    <h2> Your answer is {this.state.answer}</h2>\r\n                </div>\r\n                <div className=\"col-12 cell\">\r\n                    {this.state.correctAnswers > 0 ? <div> You have {this.state.correctAnswers} correct answers in a row! </div> : null}\r\n                </div>\r\n                <div className=\"col-12 cell\">\r\n                    {this.state.resetDisplay ? <button type=\"button\" onClick={(() => this.resetProblem())} >Next Problem</button> : null}\r\n                </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default AddMath;","import React, { Component } from 'react';\r\n\r\nclass SubtractMath extends Component {\r\n    state = { \r\n        answer:'?',\r\n        problem:'',\r\n        resetDisplay: false,\r\n        correctAnswers: 0\r\n     }\r\n\r\n    componentDidMount(){\r\n         this.randomMathProblem();\r\n     }\r\n\r\n    calcClockTime(){\r\n        this.setState({answer: \"What is the Answer?\"})\r\n    }\r\n\r\n    randomMathProblem(){\r\n        let numberBig = 0;\r\n        let numberSmall = 0;\r\n        let numberOne = (Math.floor(Math.random() * 10));\r\n        let numberTwo = (Math.floor(Math.random() * 10));\r\n        if (numberOne >= numberTwo){\r\n            numberBig = numberOne;\r\n            numberSmall = numberTwo; \r\n        }\r\n        else if (numberOne < numberTwo){\r\n            numberBig = numberTwo;\r\n            numberSmall = numberOne;\r\n        }\r\n        const problem=\r\n        <div className=\"col-12 cell\">\r\n            <div className=\"col-12 cell\">{ numberBig } - { numberSmall } = <input className=\"answerBox\" type=\"text\" size=\"4\" id=\"answer\" autoFocus autoComplete=\"off\"/></div>\r\n            <div className=\"col-12 cell\"><button type=\"button\" onClick={() => this.checkAnswer(numberBig, numberSmall, document.getElementById('answer').value)}>Check Answer</button></div>\r\n        </div> \r\n        console.log(\"problem\" + problem);\r\n        this.setState({problem});\r\n    }\r\n\r\n    checkAnswer(numberBig, numberSmall, answer){\r\n        let computerAnswer = numberBig - numberSmall;\r\n        if (answer == computerAnswer){\r\n            this.setState({answer: \"Correct\"})\r\n            let numCorrectAnswer = this.state.correctAnswers + 1;\r\n            this.setState({correctAnswers: numCorrectAnswer})\r\n            this.setState({resetDisplay:true});\r\n        }\r\n        else if (answer != computerAnswer){\r\n            this.setState({answer: \"Wrong\"})\r\n            this.setState({correctAnswers: 0})\r\n        }\r\n    }\r\n\r\n    resetProblem(){\r\n        this.setState({resetDisplay:false});\r\n        this.setState({answer: '?'});\r\n        {document.getElementById(\"answer\").value = ''}\r\n        this.randomMathProblem();\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <div className=\"row\">\r\n                <div className=\"col-12 cell\">\r\n                    <h1>Subtraction</h1>\r\n                </div>\r\n                {this.state.problem}           \r\n                <div className=\"col-12 cell\">\r\n                    <h2> Your answer is {this.state.answer}</h2>\r\n                </div>\r\n                <div className=\"col-12 cell\">\r\n                    {this.state.correctAnswers > 0 ? <div> You have {this.state.correctAnswers} correct answers in a row! </div> : null}\r\n                </div>\r\n                <div className=\"col-12 cell\">\r\n                    {this.state.resetDisplay ? <button type=\"button\" onClick={(() => this.resetProblem())} >Next Problem</button> : null}\r\n                </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default SubtractMath;","import React, { Component } from 'react';\r\n\r\nclass EquationMath extends Component {\r\n    state = { \r\n        answer:'?',\r\n        problem:'',\r\n        resetDisplay: false,\r\n        correctAnswers: 0\r\n     }\r\n\r\n    componentDidMount(){\r\n         this.randomMathProblem();\r\n     }\r\n\r\n    calcClockTime(){\r\n        this.setState({answer: \"What is the Answer?\"})\r\n    }\r\n\r\n    randomMathProblem(){\r\n        let numberOne = (Math.floor(Math.random() * 10));\r\n        let numberTwo = (Math.floor(Math.random() * 10));\r\n        const problem=\r\n        <div className=\"col-12 cell\">\r\n            <div className=\"col-12 cell\">{ numberOne } + { numberTwo} = <input className=\"answerBox\" type=\"text\" size=\"2\" id=\"answerOne\" autoFocus autoComplete=\"off\"/> + <input className=\"answerBox\" type=\"text\" size=\"2\" id=\"answerTwo\" autoFocus autoComplete=\"off\"/></div>\r\n            <div className=\"col-12 cell\"><button type=\"button\" onClick={() => this.checkAnswer(numberOne, numberTwo, document.getElementById('answerOne').value, document.getElementById('answerTwo').value)}>Check Answer</button></div>\r\n        </div> \r\n        console.log(\"problem\" + problem);\r\n        this.setState({problem});\r\n    }\r\n\r\n    checkAnswer(numberOne, numberTwo, answerOne, answerTwo){\r\n        let computerAnswer = numberOne + numberTwo;\r\n        let userAnswer = parseInt(answerOne) + parseInt(answerTwo);\r\n        console.log(answerOne);\r\n        console.log(answerTwo);\r\n        console.log(userAnswer);\r\n        if (userAnswer == computerAnswer){\r\n            this.setState({answer: \"Correct\"})\r\n            let numCorrectAnswer = this.state.correctAnswers + 1;\r\n            this.setState({correctAnswers: numCorrectAnswer})\r\n            this.setState({resetDisplay:true});\r\n        }\r\n        else if (userAnswer != computerAnswer){\r\n            this.setState({answer: \"Wrong\"})\r\n            this.setState({correctAnswers: 0})\r\n        }\r\n    }\r\n\r\n    resetProblem(){\r\n        this.setState({resetDisplay:false});\r\n        this.setState({answer: '?'});\r\n        {document.getElementById(\"answerOne\").value = ''}\r\n        {document.getElementById(\"answerTwo\").value = ''}\r\n        this.randomMathProblem();\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <div className=\"row\">\r\n                <div className=\"col-12 cell\">\r\n                    <h1>Equation</h1>\r\n                </div>\r\n                {this.state.problem}           \r\n                <div className=\"col-12 cell\">\r\n                    <h2> Your answer is {this.state.answer}</h2>\r\n                </div>\r\n                <div className=\"col-12 cell\">\r\n                    {this.state.correctAnswers > 0 ? <div> You have {this.state.correctAnswers} correct answers in a row! </div> : null}\r\n                </div>\r\n                <div className=\"col-12 cell\">\r\n                    {this.state.resetDisplay ? <button type=\"button\" onClick={(() => this.resetProblem())} >Next Problem</button> : null}\r\n                </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default EquationMath;","import React from \"react\";\r\n\r\nconst Image = ({ source }) => (\r\n  <img src={`./images/${source}`} alt=\"Example\" className=\"w-25 m-2\" />\r\n);\r\n\r\nexport default Image;","import React, { Component } from 'react';\r\nimport Image from './Image';\r\n\r\nclass DiceMath extends Component {\r\n    state = { \r\n        answer:'?',\r\n        problem:'',\r\n        resetDisplay: false,\r\n        correctAnswers: 0, \r\n        numDice: 2,\r\n        diceImage: {\r\n            diceOne: 'dice_one.PNG',\r\n            diceTwo: 'dice_two.PNG',\r\n            diceThree: 'dice_three.PNG',\r\n            diceFour: 'dice_four.PNG',\r\n            diceFive: 'dice_five.PNG',\r\n            diceSix: 'dice_six.PNG'\r\n        }\r\n     }\r\n\r\n    componentDidMount(){\r\n         this.randomMathProblem();\r\n     }\r\n\r\n    calcClockTime(){\r\n        this.setState({answer: \"What is the Answer?\"})\r\n    }\r\n\r\n    randomMathProblem(){\r\n        let numberRolled = [];     \r\n        let diceImage = [];\r\n        for (let i=0; i<this.state.numDice; i++){\r\n            numberRolled.push((Math.floor(Math.random() * 6)));\r\n            if (numberRolled[i] === 1){\r\n                diceImage.push(this.state.diceImage.diceOne) ;\r\n            }\r\n            else if (numberRolled[i] === 2){\r\n                diceImage.push(this.state.diceImage.diceTwo);\r\n            }\r\n            else if (numberRolled[i] === 3){\r\n                diceImage.push(this.state.diceImage.diceThree);\r\n            }\r\n            else if (numberRolled[i] === 4){\r\n                diceImage.push(this.state.diceImage.diceFour);\r\n            }\r\n            else if (numberRolled[i] === 5){\r\n                diceImage.push(this.state.diceImage.diceFive);\r\n            }\r\n            else if (numberRolled[i] === 6){\r\n                diceImage.push(this.state.diceImage.diceSix);\r\n            }\r\n            console.log(\"dice image: \" + diceImage[i]);\r\n        }\r\n        let test = 'dice_one.PNG';\r\n\r\n        const problem=\r\n        <div className=\"col-12\">\r\n            <div className=\"row\">\r\n            <div className=\"col-6 cell\"><Image source={test} key={test} /></div><div className=\"col-6 cell\"><div>How many?</div><input className=\"answerBox\" type=\"text\" size=\"4\" id=\"answer\" autoFocus autoComplete=\"off\"/></div>\r\n            </div>\r\n            <div className=\"col-12 cell\"><button type=\"button\" onClick={() => this.checkAnswer(numberRolled, document.getElementById('answer').value)}>Check Answer</button></div>\r\n        </div> \r\n        this.setState({problem});\r\n    }\r\n\r\n    imgTags(diceImage){\r\n        let imgText = '';\r\n        for (let i=0; i<this.state.numDice; i++){\r\n            imgText = imgText + <Image source={diceImage[i]} key={diceImage[i] + i} />;\r\n        }\r\n        console.log(imgText);\r\n        return (\r\n            <div className=\"col-12 cell\">\r\n                {imgText}\r\n            </div>\r\n            \r\n        )\r\n    }\r\n\r\n    checkAnswer(numberRolled, answer){\r\n        let computerAnswer = numberRolled[0];\r\n        if (answer == computerAnswer){\r\n            this.setState({answer: \"Correct\"})\r\n            let numCorrectAnswer = this.state.correctAnswers + 1;\r\n            this.setState({correctAnswers: numCorrectAnswer})\r\n            this.setState({resetDisplay:true});\r\n        }\r\n        else if (answer != computerAnswer){\r\n            this.setState({answer: \"Wrong\"})\r\n            this.setState({correctAnswers: 0})\r\n        }\r\n    }\r\n\r\n    resetProblem(){\r\n        this.setState({resetDisplay:false});\r\n        this.setState({answer: '?'});\r\n        {document.getElementById(\"answer\").value = ''}\r\n        this.randomMathProblem();\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <div className=\"row\">\r\n                <div className=\"col-12 cell\">\r\n                    <h1>Dice</h1>\r\n                    <Image source='dice_one.PNG' key='dice_one.PNG' />\r\n                </div>\r\n                {this.state.problem}           \r\n                <div className=\"col-12 cell\">\r\n                    <h2> Your answer is {this.state.answer}</h2>\r\n                </div>\r\n                <div className=\"col-12 cell\">\r\n                    {this.state.correctAnswers > 0 ? <div> You have {this.state.correctAnswers} correct answers in a row! </div> : null}\r\n                </div>\r\n                <div className=\"col-12 cell\">\r\n                    {this.state.resetDisplay ? <button type=\"button\" onClick={(() => this.resetProblem())} >Next Problem</button> : null}\r\n                </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default DiceMath;","import React, { Component } from 'react';\r\n\r\nclass ButtonBox extends Component {\r\n    state = { }\r\n    render() { \r\n        return ( \r\n            <div>\r\n                <button className=\"btn btn-secondary ButtonBox\" onClick={() => this.props.onClick(this.props.name)}>{this.props.name}</button>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default ButtonBox","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport './components/addMath';\r\nimport AddMath from './components/addMath';\r\nimport SubtractMath from './components/subtractMath';\r\nimport EquationMath from './components/equationMath';\r\nimport DiceMath from './components/diceMath';\r\nimport ButtonBox from './components/buttonBox';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nclass App extends Component {\r\n  state = { \r\n    displayAddition: false,\r\n    displaySubtraction: false,\r\n    displayEquation: false,\r\n    displayDice: false\r\n   }\r\n\r\n   handleClick(clickType){\r\n    console.log(clickType);\r\n    if (clickType === \"displayAddition\"){\r\n      this.setState({ displayAddition: true});\r\n      this.setState({ displaySubtraction: false});\r\n      this.setState({ displayEquation: false});\r\n      this.setState({displayDice: false});\r\n    }\r\n    else if (clickType === \"displaySubtraction\"){\r\n      this.setState({ displaySubtraction: true});\r\n      this.setState({ displayAddition: false});\r\n      this.setState({ displayEquation: false});\r\n      this.setState({displayDice: false});\r\n    }\r\n    else if (clickType === \"displayEquation\"){\r\n      this.setState({ displayEquation: true});\r\n      this.setState({ displaySubtraction: false});\r\n      this.setState({ displayAddition: false});\r\n      this.setState({displayDice: false});\r\n    }\r\n    else if (clickType === \"displayDice\"){\r\n      this.setState({ displayEquation: false});\r\n      this.setState({ displaySubtraction: false});\r\n      this.setState({ displayAddition: false});\r\n      this.setState({displayDice: true});\r\n    }\r\n  }\r\n\r\n  render() { \r\n    return ( \r\n      <div className=\"App container-fluid\">\r\n      <div className=\"header row\">\r\n        <div className=\"col-12\">\r\n          <h1>Hello WORLD!</h1>          \r\n            <div className=\"row\">\r\n              <ButtonBox name=\"Addition\" onClick={() => this.handleClick(\"displayAddition\")}/>\r\n              <ButtonBox name=\"Subtraction\" onClick={() => this.handleClick(\"displaySubtraction\")}/>\r\n              <ButtonBox name=\"Equation\" onClick={() => this.handleClick(\"displayEquation\")}/>\r\n              <ButtonBox name=\"Dice\" onClick={() => this.handleClick(\"displayDice\")}/>\r\n            </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"mainWrapper row\">\r\n        {this.state.displayAddition ? <AddMath /> : null}\r\n        {this.state.displaySubtraction ? <SubtractMath /> : null}\r\n        {this.state.displayEquation ? <EquationMath /> : null}\r\n        {this.state.displayDice ? <DiceMath /> : null}\r\n      </div>\r\n      </div>\r\n     );\r\n  }\r\n}\r\n \r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}